/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tasktoo;

import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import java.io.File;
import java.util.*;

public class App {
    private static final Set<String> ALLOWED_FIELDS = new HashSet<>(Arrays.asList(
            "name", "postalzip", "region", "country", "address", "list"
    ));

    public static void main(String[] args) {
        try {
            // User input for fields
            Scanner scanner = new Scanner(System.in);
            System.out.println("Enter the fields you want to display (comma separated â€” name, postalZip, region, country, address, list): ");
            String input = scanner.nextLine();
            String[] inputFields = input.split(",");

            List<String> selectedFields = new ArrayList<>();
            for (String field : inputFields) {
                String trimmedField = field.trim().toLowerCase();
                if (ALLOWED_FIELDS.contains(trimmedField)) {
                    selectedFields.add(trimmedField);
                } else {
                    System.out.println("Warning: '" + field.trim() + "' is not a valid field and will be ignored.");
                }
            }

            if (selectedFields.isEmpty()) {
                System.out.println("No valid fields were entered. Exiting program.");
                return;
            }

            // Prepare SAX parser
            SAXParserFactory factory = SAXParserFactory.newInstance();
            SAXParser saxParser = factory.newSAXParser();

            // JSON array opening
            System.out.println("[");
            saxParser.parse(new File("C:\\Users\\sixol\\OneDrive\\Desktop\\tasktoo\\app\\src\\main\\resources\\data.xml"), new RecordHandler(selectedFields));
            // JSON array closing
            System.out.println("]");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // SAX handler class
    static class RecordHandler extends DefaultHandler {
        private List<String> selectedFields;
        private Map<String, String> currentRecord;
        private StringBuilder charactersBuffer;
        private String currentElement;
        private boolean firstRecord = true;

        RecordHandler(List<String> selectedFields) {
            this.selectedFields = selectedFields;
        }

        @Override
        public void startElement(String uri, String localName, String qName, Attributes attributes) {
            if (qName.equals("record")) {
                currentRecord = new LinkedHashMap<>();
            } else if (currentRecord != null) {
                currentElement = qName.toLowerCase();
                charactersBuffer = new StringBuilder();
            }
        }

        @Override
        public void characters(char[] ch, int start, int length) {
            if (charactersBuffer != null) {
                charactersBuffer.append(ch, start, length);
            }
        }

        @Override
        public void endElement(String uri, String localName, String qName) {
            if (qName.equals("record")) {
                if (!firstRecord) {
                    System.out.println(",");
                } else {
                    firstRecord = false;
                }
                printJson(currentRecord);
            } else if (currentRecord != null && charactersBuffer != null) {
                currentRecord.put(currentElement, charactersBuffer.toString().trim());
            }
        }

        private void printJson(Map<String, String> record) {
            StringBuilder json = new StringBuilder();
            json.append("  {");
            for (int i = 0; i < selectedFields.size(); i++) {
                String field = selectedFields.get(i);
                String value = record.getOrDefault(field, "");
                json.append("\"").append(field).append("\": \"").append(escapeJson(value)).append("\"");
                if (i < selectedFields.size() - 1) {
                    json.append(", ");
                }
            }
            json.append("}");
            System.out.print(json);
        }

        // Escape JSON special characters
        private String escapeJson(String value) {
            return value.replace("\\", "\\\\")
                        .replace("\"", "\\\"")
                        .replace("\n", "\\n")
                        .replace("\r", "\\r");
        }
    }
}
